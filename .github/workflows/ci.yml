
name: CI

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - "**.css"
      - "**.js"
      - "**.md"
      - "**.html"
      - "**.csv"
  schedule:
    # Run everday at midnight UTC / 5:30 IST
    - cron: "0 0 * * *"

concurrency:
  group: develop-ksa_compliance-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  check-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      approved: ${{ steps.check-reviews.outputs.approved }}
    steps:
      - uses: actions/github-script@v6
        id: check-reviews
        with:
          script: |
            // Get all reviews for the PR
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Get the PR details to check requested reviewers
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Get requested reviewers (both users and teams)
            const requestedReviewers = new Set();
            
            // Add requested users
            if (pr.requested_reviewers) {
              pr.requested_reviewers.forEach(reviewer => {
                requestedReviewers.add(reviewer.login);
              });
            }
            
            // Add requested teams
            if (pr.requested_teams) {
              pr.requested_teams.forEach(team => {
                requestedReviewers.add(`team:${team.slug}`);
              });
            }
            
            // Special case: If PR creator is the repository owner and no reviewers were requested,
            // we need to handle this scenario differently
            const isOwnerPR = pr.user.login === context.repo.owner;
            const hasRequestedReviewers = requestedReviewers.size > 0;
            
            // If owner creates PR and no reviewers were requested, allow self-approval
            if (isOwnerPR && !hasRequestedReviewers) {
              // Check if owner has approved their own PR
              const ownerApproval = reviews.find(review => 
                review.user.login === context.repo.owner && 
                review.state === 'APPROVED'
              );
              
              if (ownerApproval) {
                core.setOutput('approved', true);
                return;
              } else {
                core.setFailed(`This pull request was created by the repository owner but requires approval.
                
                Options:
                1. Add a specific reviewer to the PR, OR
                2. Approve your own PR (self-approval allowed for owner)
                
                Note: Owner self-approval is only allowed when no specific reviewers are requested.`);
                return;
              }
            }
            
            // Filter reviews to only include those from requested reviewers
            const validReviews = reviews.filter(review => {
              // Only consider reviews from users who were requested
              if (requestedReviewers.has(review.user.login)) {
                return true;
              }
              
              // Check if reviewer is part of a requested team
              if (review.user.type === 'User') {
                // For team members, we need to check if their team was requested
                // This is a simplified check - you might want to enhance this
                return false;
              }
              
              return false;
            });
            
            // Get approved reviews from requested reviewers only
            const approvedReviews = validReviews.filter(review => 
              review.state === 'APPROVED'
            );
            
            // Check if PR is from a fork (external contributor)
            const isFork = context.payload.pull_request.head.repo.full_name !== context.payload.pull_request.base.repo.full_name;
            
            // Require only 1 approval from requested reviewers for both fork and non-fork PRs
            const requiredApprovals = 1;
            const hasEnoughApprovals = approvedReviews.length >= requiredApprovals;
            
            // Check if PR has been reviewed by requested maintainers/admins
            const maintainerReviews = approvedReviews.filter(review => 
              ['OWNER', 'MEMBER', 'COLLABORATOR'].includes(review.author_association)
            );
            
            const isApproved = hasEnoughApprovals && maintainerReviews.length > 0;
            
            core.setOutput('approved', isApproved);
            
            if (!isApproved) {
              core.setFailed(`This pull request requires proper code review before tests can run.
              
              Requirements:
              - Only approvals from REQUESTED reviewers are considered
              - Exactly 1 approval from a requested maintainer is required (for both fork and non-fork PRs)
              - Current valid approvals: ${approvedReviews.length}/${requiredApprovals}
              - Maintainer approvals from requested reviewers: ${maintainerReviews.length}
              - Requested reviewers: ${Array.from(requestedReviewers).join(', ') || 'None'}`);
            }

  tests:
    runs-on: ubuntu-latest
    needs: check-review
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && needs.check-review.outputs.approved == 'true')
    strategy:
      fail-fast: false
    name: Server

    services:
      redis-cache:
        image: redis:alpine
        ports:
          - 13000:6379
      redis-queue:
        image: redis:alpine
        ports:
          - 11000:6379
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Find tests
        run: |
          echo "Finding tests"
          grep -rn "def test" > /dev/null

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml', '**/setup.py', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: 'echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT'

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install MariaDB Client
        run: sudo apt-get update && sudo apt-get install -y mariadb-client

      - name: Setup
        run: |
          pip install frappe-bench
          bench init --frappe-branch version-15 --skip-redis-config-generation --skip-assets --python "$(which python)" ~/frappe-bench
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL character_set_server = 'utf8mb4'"
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL collation_server = 'utf8mb4_unicode_ci'"

      - name: Install
        working-directory: /home/runner/frappe-bench
        run: |
          bench get-app ksa_compliance https://github.com/ruknsoftware/rukn-zatca-connector.git --branch develop
          bench setup requirements --dev
          bench new-site --db-root-password root --admin-password admin test_site
          bench get-app erpnext --branch version-15
          bench get-app payments --branch version-15
          bench --site test_site install-app erpnext
          bench --site test_site install-app payments
          bench --site test_site install-app ksa_compliance
          bench build
        env:
          CI: 'Yes'

      - name: Run Tests
        working-directory: /home/runner/frappe-bench
        run: |
          bench --site test_site set-config allow_tests true
          bench --site test_site run-tests --app ksa_compliance
        env:
          TYPE: server
